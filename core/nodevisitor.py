from .token import Token
from .ast import BinOP
import logging

class NodeVisitor(object):
    """
    Implements the Visitor pattern to visit and interpret the AST generated by the parser
    """
    def __init__(self):
        self.logger: logging.Logger = logging.getLogger(__name__)

    def visit(self, node: Token | BinOP):
        """
        :param node: Target node to visit
        :type node: Token() | BinOP()
        """
        method_name = "visit_" + type(node).__name__
        visitor = getattr(self, method_name, self.generic_visit)
        return visitor(node)
    
    def generic_visit(self, node: any):
        self.logger.error(f"No visit_{type(node).__name__} method")
    
