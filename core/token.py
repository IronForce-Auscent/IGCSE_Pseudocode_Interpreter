import enum

class TokenType(enum.Enum):
    # Format of token
    # name = value

    EOF = "EOF"
    NEWLINE = "NEWLINE"
    INTEGER = "INTEGER"
    IDENTIFIER = "IDENTIFIER"
    STRING = "STRING"
    BOOL = "BOOL"
    SEMI = ";"
    DOT = "."

    # Reserved Keywords
    INPUT = "INPUT"
    OUTPUT = "OUTPUT"
    IF = "IF"
    THEN = "THEN"
    ENDIF = "ENDIF"
    WHILE = "WHILE"
    DO = "DO"
    ENDWHILE = "ENDWHILE"
    LET = "LET"
    FOR = "FOR"
    TO = "TO"
    NEXT = "NEXT"
    TRUE = "TRUE"
    FALSE = "FALSE"
    START = "START"
    END = "END"

    # Operators
    EQ = "EQ"
    PLUS = "PLUS"
    MINUS = "MINUS"
    MUL = "MUL"
    DIV = "DIV"
    EQEQ = "EQEQ"
    NOTEQ = "NOTEQ"
    GTEQ = "GTEQ"
    GTHAN = "GTHAN"
    LTEQ = "LTEQ"
    LTHAN = "LTHAN"
    LPAREN = "LPAREN"
    RPAREN = "RPAREN"

    @classmethod
    def get_values(cls, target: str, _default:  str = ""):
        """
        Searches the list of valid tokens and returns if there's a match

        :param target: The target token type to find
        :type target: str
        :param _default: The value to return if no matches are found
        :type _default: str
        :return: The value of the matched token
        :rtype: any
        """
        for member in cls:
            if member.name == target:
                return member.value
        return _default
    
    @classmethod
    def get_token_type(cls, target: str):
        """
        Searches the list of valid tokens and returns a token if there's a match

        :param target: The target token type to find
        :type target: str
        :return: The object corrosponding to the matched token type
        :rtype: TokenType()
        """
        for member in cls:
            if member.name == target:
                return member
        return None


class Token(object):
    """
    Core object representing the tokens generated by the lexical analyzer from the source code

    :param token_type: The token type of the token
    :type token_type: TokenType()
    :param token_value: The value associated with the token
    :type token_value: any
    """
    def __init__(self, token_type: TokenType, token_value: any):        
        self.type: TokenType = token_type
        self.value: any = token_value
    
    def __str__(self):
        """
        Returns the string representation of the class instance

        :return: Token(self.type, self.value)
        """
        return f"Token({self.type}, {repr(self.value)})"
    
    def __repr__(self):
        return self.__str__()
